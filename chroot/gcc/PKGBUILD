pkgname=chroot-gcc
pkgver=8+20181109
snapver=8.2.1
gmpver=6.1.2
mpfrver=4.0.1
mpcver=1.1.0
islver=0.20
pkgrel=1
arch=('x86_64' 'i586' 'aarch64' 'arm' 'mips64' 'mips' 'powerpc64le' 'powerpc64' 'powerpc' 'sparc64' 'sparc' 's390x' 'microblaze' 'riscv64' 'riscv32')
source=(http://mirror.linux-ia64.org/gnu/gcc/snapshots/${pkgver/+/-}/gcc-${pkgver/+/-}.tar.xz
	http://ftpmirror.gnu.org/gnu/gmp/gmp-$gmpver.tar.xz
	http://www.mpfr.org/mpfr-$mpfrver/mpfr-$mpfrver.tar.xz
	http://ftpmirror.gnu.org/gnu/mpc/mpc-$mpcver.tar.gz
	http://isl.gforge.inria.fr/isl-$islver.tar.xz
	0001-Fix-stack-protection-issues.patch
	openmp-vectorize-v2.patch
	fortran-vector-v2.patch
	optimize.patch
	ipa-cp.patch
	optimize-at-least-some.patch
	gomp-relax.patch
	avx512-when-we-ask-for-it.patch
	hj.patch
	pow-optimization.patch
	zero-regs-gcc8.patch
	hj-patch-round.patch)

prepare() {
	cd gcc-${pkgver/+/-}
	patch -p1 -i $srcdir/0001-Fix-stack-protection-issues.patch
	patch -p1 -i $srcdir/openmp-vectorize-v2.patch
	patch -p1 -i $srcdir/fortran-vector-v2.patch
	patch -p1 -i $srcdir/optimize.patch
	patch -p1 -i $srcdir/ipa-cp.patch
	patch -p1 -i $srcdir/optimize-at-least-some.patch
	patch -p1 -i $srcdir/gomp-relax.patch
	patch -p1 -i $srcdir/avx512-when-we-ask-for-it.patch
	patch -p1 -i $srcdir/hj.patch
	patch -p1 -i $srcdir/pow-optimization.patch
	patch -p1 -i $srcdir/zero-regs-gcc8.patch
	patch -p1 -i $srcdir/hj-patch-round.patch

	sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
	sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
	sed -i '/m64=/s/lib64/lib/' gcc/config/rs6000/t-linux64
	sed -i '/lp64=/s/lib64/lib/' gcc/config/aarch64/t-aarch64-linux
	sed -i 's,lib64,lib,g' gcc/config/sparc/t-linux64
	sed -i 's,lib64,lib,g' gcc/config/s390/t-linux64
	sed -i 's,lib64,lib,g' gcc/config/mips/t-linux64

	for file in gcc/config/linux.h gcc/config/i386/linux.h gcc/config/i386/linux64.h \
			gcc/config/aarch64/aarch64-linux.h \
			gcc/config/arm/linux-eabi.h gcc/config/arm/linux-elf.h \
			gcc/config/mips/linux.h \
			gcc/config/microblaze/linux.h \
			gcc/config/rs6000/linux64.h gcc/config/rs6000/sysv4.h \
			gcc/config/sparc/linux.h gcc/config/sparc/linux64.h \
			gcc/config/s390/linux.h \
			gcc/config/pa/pa-linux.h \
			gcc/config/riscv/linux.h; do
		cp -u $file{,.orig}
		sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
			-e 's@/usr@/tools@g' $file.orig > $file
		echo '
	#undef STANDARD_STARTFILE_PREFIX_1
	#undef STANDARD_STARTFILE_PREFIX_2
	#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
	#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
		touch $file.orig
	done

	mv ../gmp-$gmpver gmp
	mv ../mpfr-$mpfrver mpfr
	mv ../mpc-$mpcver mpc
	mv ../isl-$islver isl

	mkdir build
}

build() {
	export CFLAGS="$CFLAGS"
	export CXXFLAGS="$CFLAGS"
	export CFLAGS_FOR_TARGET="$CFLAGS"
	export CXXFLAGS_FOR_TARGET="$CXXFLAGS"

	cd gcc-${pkgver/+/-}
	cd build
	../configure \
		--prefix=/tools \
		--libdir=/tools/lib \
		--libexecdir=/tools/lib \
		--build=$XHOST \
		--host=$XTARGET \
		--target=$XTARGET $GCCOPTS \
		--with-pkgversion="Minitena $pkgver" \
		--with-bugurl='https://github.com/minitena/source/issues' \
		--with-local-prefix=/tools \
		--with-native-system-header-dir=/tools/include \
		--with-system-zlib \
		--enable-__cxa_atexit \
		--enable-checking=release \
		--enable-clocale=gnu \
		--enable-default-pie \
		--enable-default-ssp \
		--enable-gnu-indirect-function \
		--enable-gnu-unique-object \
		--enable-languages=c,c++,lto \
		--enable-install-libiberty \
		--enable-linker-build-id \
		--enable-lto \
		--enable-plugin \
		--enable-shared \
		--enable-threads=posix \
		--disable-libmpx \
		--disable-libstdcxx-pch \
		--disable-libunwind-exceptions \
		--disable-multilib \
		--disable-nls \
		--disable-werror
	make AS_FOR_TARGET="$AS" LD_FOR_TARGET="$LD"
}

package() {
	cd gcc-${pkgver/+/-}
	cd build
	make -j1 DESTDIR=$pkgdir install

	ln -sf gcc $pkgdir/tools/bin/cc

	ln -sf ../bin/cpp $pkgdir/tools/lib

	install -dm755 $pkgdir/tools/lib/bfd-plugins/
	ln -sf /tools/lib/gcc/$XTARGET/${snapver}/liblto_plugin.so $pkgdir/tools/lib/bfd-plugins/

	install -dm755 $pkgdir/usr/lib/bfd-plugins/
	ln -sf /tools/lib/gcc/$XTARGET/${snapver}/liblto_plugin.so $pkgdir/usr/lib/bfd-plugins/
}
