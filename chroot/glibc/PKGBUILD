pkgname=chroot-glibc
pkgver=2.28
pkgrel=1
arch=('x86_64' 'i586' 'aarch64' 'arm')
source=(http://ftpmirror.gnu.org/gnu/glibc/glibc-$pkgver.tar.xz
	0001-Set-host.conf-multi-to-on-by-default.patch
	skip-error-msg-ld.so.conf.patch
	ldconfig-format-new.patch
	mkdir-ldconfig.patch
	nonscd.patch
	alternate_trim.patch
	madvise-bss.patch
	spinaphore.patch
	tzselect-proper-zone-file.patch
	large-page-huge-page.patch
	use_madv_free.patch
	malloc_tune.patch
	mathlto.patch
	vzeroupper-2.27.patch
	pause.patch
	gcc-8-fix.patch
	spin-smarter.patch
	nostackshrink.patch
	strcpy-avx2.patch)

prepare() {
	cd glibc-$pkgver
	patch -p1 -i $srcdir/0001-Set-host.conf-multi-to-on-by-default.patch
	patch -p1 -i $srcdir/skip-error-msg-ld.so.conf.patch
	patch -p1 -i $srcdir/ldconfig-format-new.patch
	patch -p1 -i $srcdir/mkdir-ldconfig.patch
	patch -p1 -i $srcdir/nonscd.patch
	patch -p1 -i $srcdir/alternate_trim.patch
	patch -p1 -i $srcdir/madvise-bss.patch
	patch -p1 -i $srcdir/spinaphore.patch
	patch -p1 -i $srcdir/tzselect-proper-zone-file.patch
	patch -p1 -i $srcdir/large-page-huge-page.patch
	patch -p1 -i $srcdir/use_madv_free.patch
	patch -p1 -i $srcdir/malloc_tune.patch
	patch -p1 -i $srcdir/mathlto.patch
	patch -p1 -i $srcdir/vzeroupper-2.27.patch
	patch -p1 -i $srcdir/pause.patch
	patch -p1 -i $srcdir/gcc-8-fix.patch
	patch -p1 -i $srcdir/spin-smarter.patch
	patch -p1 -i $srcdir/nostackshrink.patch
	patch -p1 -i $srcdir/strcpy-avx2.patch

	mkdir build
	cd build

	echo "slibdir=/tools/lib" >> configparms
	echo "rtlddir=/tools/lib" >> configparms
	echo "sbindir=/tools/bin" >> configparms
	echo "rootsbindir=/tools/bin" >> configparms
}

build() {
	export CFLAGS="${CFLAGS/-fno-plt}"
	export CXXFLAGS="${CXXFLAGS/-fno-plt}"
	export CFLAGS="${CFLAGS/-D_FORTIFY_SOURCE=2}"
	export CXXFLAGS="${CXXFLAGS/-D_FORTIFY_SOURCE=2}"
	export CFLAGS="$CFLAGS -g2"
	export CXXFLAGS="$CXXFLAGS -g2"

	cd glibc-$pkgver
	cd build

	BUILD_CC="$HOSTCC" \
	CC="$XTARGET-gcc" \
	AR="$XTARGET-ar" \
	RANLIB="$XTARGET-ranlib" \
	../configure \
		--prefix=/tools \
		--libdir=/tools/lib \
		--build=$XHOST \
		--host=$XTARGET $GLIBCOPTS \
		--with-pkgversion="Minitena $pkgver" \
		--with-bugurl='https://github.com/minitena/source/issues' \
		--with-binutils=$TOOLS/bin \
		--with-headers=$ROOTFS/tools/include \
		--without-gd \
		--without-selinux \
		--enable-add-ons \
		--enable-bind-now \
		--enable-kernel=3.12.0 \
		--enable-lock-elision \
		--enable-stack-protector=strong \
		--enable-stackguard-randomization \
		--disable-profile \
		--disable-werror \
		libc_cv_forced_unwind=yes \
		libc_cv_c_cleanup=yes
	make
}

package() {
	cd glibc-$pkgver
	cd build
	make install_root=$pkgdir install
}
