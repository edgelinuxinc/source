# Maintainer: protonesso <nagakamira@gmail.com>
# Contributor: protonesso <nagakamira@gmail.com>

pkgname=('linux' 'linux-devel')
pkgbase=linux
pkgver=4.19.8
zerover=$pkgver
pkgrel=31
arch=('x86_64' 'i586' 'aarch64' 'armv7h' 'armv6h' 'armv5tel' 'powerpc64le' 'powerpc64' 'powerpc' 'sparc64' 's390x' 'alpha' 'riscv64')
url="https://www.kernel.org/"
license=('GPL')
options=('!strip')
makedepends=('kmod' 'bc' 'libelf' 'xz-utils' 'lz4' 'libressl')
source=("https://cdn.kernel.org/pub/linux/kernel/v4.x/$pkgbase-$pkgver.tar.xz"
	'alpha-config'
	'arm64-config'
	'armv7h-config'
	'armv6h-config'
	'armv5tel-config'
	'i586-config'
	'powerpc64le-config'
	'powerpc64-config'
	'powerpc-config'
	'riscv64-config'
	's390x-config'
	'sparc64-config'
	'x86_64-config'
	'60-linux.hook'
	'90-linux.hook')
md5sums=('52f552cea1863c928cb8b9dd09cdaf29'
         '7b3ab85a63dc66092a3fff9c8a335520'
         'c7f667c2225f4294826f347d5d9582b5'
         'c534d53425f2fe39f2b50749fb1d8449'
         '0f212e623825557d308d9b061f61070d'
         'cc47ffdd526b6681ab4a3fa3f696bd33'
         '50d18a695e0e3c9df198c36c5bc179ac'
         '0bf7c9ba6d0d93ae13b100e1ac145c5f'
         '5763eda415af7d96afe16a34a6435bf2'
         'cf6ec1e6bfb306a01a2952d3b86cf168'
         '501a0e5733653b0a6f9e7b992f612cda'
         'c39a00d60ac3aa5e98745571f921f9bd'
         '6667dc75147c04a074c6e03f6e47d309'
         '772362a6631b34d082fe654c50db4cae'
         'add14545fc8904d76a9becdc89b24a55'
         '290b6529bb3e5edec1454acc27023193')

prepare() {
	cd $pkgbase-$pkgver
	msg "Preparing kernel..."
	make mrproper

	case $CARCH in
		x86_64)
			export XKARCH="x86_64"
			cp $srcdir/x86_64-config .config
			;;
		i586)
			export XKARCH="i386"
			cp $srcdir/i586-config .config
			;;
		aarch64)
			export XKARCH="arm64"
			cp $srcdir/arm64-config .config
			;;
		armv7h)
			export XKARCH="arm"
			cp $srcdir/armv7h-config .config
			;;
		armv6h)
			export XKARCH="arm"
			cp $srcdir/armv6h-config .config
			;;
		armv5tel)
			export XKARCH="arm"
			cp $srcdir/armv5tel-config .config
			;;
		powerpc64le)
			export XKARCH="powerpc"
			cp $srcdir/powerpc64le-config .config
			;;
		powerpc64)
			export XKARCH="powerpc"
			cp $srcdir/powerpc64-config .config
			;;
		powerpc)
			export XKARCH="powerpc"
			cp $srcdir/powerpc-config .config
			;;
		sparc64)
			cp $srcdir/sparc64-config .config
			;;
		s390x)
			cp $srcdir/s390x-config .config
			;;
		alpha)
			cp $srcdir/alpha-config .config
			;;
		riscv64)
			export XKARCH="riscv"
			cp $srcdir/riscv64-config config
			;;
		*)
			echo "Architecture is not set or is not supported"
			exit 1
	esac

	case $CARCH in
		riscv64)
			make ARCH=$XKARCH allnoconfig KCONFIG_ALLCONFIG=config
			;;
		*)
			make ARCH=$XKARCH olddefconfig
	esac
}

build() {
	msg "Building kernel..."

	cd $pkgbase-$pkgver
	case $CARCH in
		x86_64)
			export XKARCH="x86_64"
			;;
		i586)
			export XKARCH="i386"
			;;
		aarch64)
			export XKARCH="arm64"
			;;
		armv7h|armv6h|armv5tel)
			export XKARCH="arm"
			;;
		powerpc64le|powerpc64|powerpc)
			export XKARCH="powerpc"
			;;
		sparc64)
			export XKARCH="sparc"
			;;
		s390x)
			export XKARCH="s390"
			;;
		alpha)
			export XKARCH="alpha"
			;;
		riscv64)
			export XKARCH="riscv"
			;;
		*)
			echo "Architecture is not set or is not supported"
			exit 1
	esac

	make ARCH=$XKARCH

	case $CARCH in
		alpha)
			export XKARCH="alpha"
			make ARCH=$XKARCH boot
			;;
	esac
}

package_linux() {
	pkgdesc="The Linux kernel"
	install=linux.install

	msg "Installing kernel contents to the $pkgdir directory..."

	cd $pkgbase-$pkgver
	case $CARCH in
		x86_64)
			export XKARCH="x86_64"
			export IMG="arch/x86/boot/bzImage"
			;;
		i586)
			export XKARCH="i386"
			export IMG="arch/x86/boot/bzImage"
			;;
		aarch64)
			export XKARCH="arm64"
			export IMG="arch/arm64/boot/Image"
			;;
		armv7h|armv6h|armv5tel)
			export XKARCH="arm"
			export IMG="arch/arm/boot/zImage"
			;;
		powerpc64le|powerpc64|powerpc)
			export XKARCH="powerpc"
			export IMG="vmlinux"
			;;
		sparc64)
			export XKARCH="sparc"
			export IMG="arch/sparc/boot/image"
			;;
		s390x)
			export XKARCH="s390"
			export IMG="arch/s390/boot/bzImage"
			;;
		alpha)
			export XKARCH="alpha"
			export IMG="arch/alpha/boot/vmlinux.gz"
			;;
		riscv64)
			export XKARCH="riscv"
			export IMG="vmlinux"
			;;
		*)
			echo "Architecture is not set or is not supported"
			exit 1
	esac

	mkdir -p $pkgdir/usr/lib/modules/

	sed -i '2iexit 0' scripts/depmod.sh
	make ARCH=$XKARCH INSTALL_MOD_PATH=$pkgdir/usr modules_install

	mkdir -p $pkgdir/boot
	cp -i $IMG $pkgdir/boot/vmlinuz-linux
	cp -i System.map $pkgdir/boot/System.map-linux
	cp -i .config $pkgdir/boot/config-linux

	case $CARCH in
		aarch64|armv7h|armv6h|armv5tel)
			make ARCH=$XKARCH INSTALL_DTBS_PATH=$PKG/boot/dtbs dtbs_install
			;;
	esac

	install -dm755 $pkgdir/usr/share/libalpm/hooks/
	install -m644 $srcdir/*linux.hook $pkgdir/usr/share/libalpm/hooks/

	local subst="
		s|%KVER%|$zerover|g
	"

	sed "$subst" $startdir/linux.install > "$startdir/$install.pkg"
	true && install=$install.pkg

	sed -i "$subst" $pkgdir/usr/share/libalpm/hooks/60-linux.hook
	sed -i "$subst" $pkgdir/usr/share/libalpm/hooks/90-linux.hook

	cd $pkgdir/usr/lib/modules/$zerover
	rm -f source build
	ln -sf ../../../src/linux build
}

package_linux-devel() {
	pkgdesc="Development files of Linux kernel to build various modules"

	case $CARCH in
		x86_64)
			export KARCH="x86"
			export SUBKARCH="x86_64"
			;;
		i586)
			export KARCH="x86"
			export SUBKARCH="i386"
			;;
		aarch64)
			export KARCH="arm64"
			;;
		armv7h|armv6h|armv5tel)
			export KARCH="arm"
			;;
		powerpc64le|powerpc64|powerpc)
			export KARCH="powerpc"
			;;
		sparc64)
			export KARCH="sparc"
			;;
		s390x)
			export KARCH="s390"
			;;
		alpha)
			export KARCH="alpha"
			;;
		riscv64)
			export KARCH="riscv"
			;;
		*)
			echo "Architecture is not set or is not supported"
			exit 1
	esac

	cd $pkgbase-$pkgver
	install -Dm644 Makefile $pkgdir/usr/src/linux/Makefile
	install -Dm644 kernel/Makefile $pkgdir/usr/src/linux/kernel/Makefile
	install -Dm644 .config $pkgdir/usr/src/linux/.config
	mkdir -p $pkgdir/usr/src/linux/include

	for i in acpi asm-generic config crypto drm generated linux math-emu \
		media net pcmcia scsi sound trace uapi video xen; do
		if [ -d include/$i ]; then
			cp -a include/$i $pkgdir/usr/src/linux/include
		fi
	done

	mkdir -p $pkgdir/usr/src/linux/arch/$KARCH
	cp -a arch/$KARCH/include $pkgdir/usr/src/linux/arch/$KARCH

	cp Module.symvers $pkgdir/usr/src/linux
	cp -a scripts $pkgdir/usr/src/linux

	mkdir -p $pkgdir/usr/src/linux/arch/$KARCH/kernel
	cp arch/$KARCH/Makefile $pkgdir/usr/src/linux/arch/$KARCH
	if [ "$SUBKARCH" = "i386" ]; then
		mkdir -p $pkgdir/usr/src/linux/arch/x86
		cp arch/x86/Makefile_32.cpu $pkgdir/usr/src/linux/arch/x86
	fi
	if [ "$KARCH" = "x86" ]; then
		mkdir -p $pkgdir/usr/src/linux/arch/x86/kernel
		cp arch/x86/kernel/asm-offsets.s $pkgdir/usr/src/linux/arch/x86/kernel
	fi

	for i in bt8xx cx88 saa7134; do
		mkdir -p $pkgdir/usr/src/linux/drivers/media/pci/${i}
		cp -a drivers/media/pci/${i}/*.h $pkgdir/usr/src/linux/drivers/media/pci/${i}
	done
	for i in cpia2 em28xx pwc; do
		mkdir -p $pkgdir/usr/src/linux/drivers/media/usb/${i}
		cp -a drivers/media/usb/${i}/*.h $pkgdir/usr/src/linux/drivers/media/usb/${i}
	done
	mkdir -p $pkgdir/usr/src/linux/drivers/media/i2c
	cp drivers/media/i2c/*.h $pkgdir/usr/src/linux/drivers/media/i2c
	for i in cx25840; do
		mkdir -p $pkgdir/usr/src/linux/drivers/media/i2c/${i}
		cp -a drivers/media/i2c/${i}/*.h $pkgdir/usr/src/linux/drivers/media/i2c/${i}
	done

	mkdir -p $pkgdir/usr/src/linux/drivers/md
	cp drivers/md/*.h $pkgdir/usr/src/linux/drivers/md

	mkdir -p $pkgdir/usr/src/linux/include/linux
	cp include/linux/inotify.h $pkgdir/usr/src/linux/include/linux

	mkdir -p $pkgdir/usr/src/linux/net/mac80211/
	cp net/mac80211/*.h $pkgdir/usr/src/linux/net/mac80211

	mkdir -p $pkgdir/usr/src/linux/include/config/dvb/
	cp include/config/dvb/*.h $pkgdir/usr/src/linux/include/config/dvb/

	mkdir -p $pkgdir/usr/src/linux/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/lgdt330x.h \
		$pkgdir/usr/src/linux/drivers/media/dvb-frontends/
	cp drivers/media/i2c/msp3400-driver.h $pkgdir/usr/src/linux/drivers/media/i2c/

	mkdir -p $pkgdir/usr/src/linux/drivers/media/usb/dvb-usb
	cp drivers/media/usb/dvb-usb/*.h $pkgdir/usr/src/linux/drivers/media/usb/dvb-usb/
	mkdir -p $pkgdir/usr/src/linux/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/*.h $pkgdir/usr/src/linux/drivers/media/dvb-frontends/
	mkdir -p $pkgdir/usr/src/linux/drivers/media/tuners
	cp drivers/media/tuners/*.h $pkgdir/usr/src/linux/drivers/media/tuners/

	mkdir -p $pkgdir/usr/src/linux/fs/xfs/libxfs
	mkdir -p $pkgdir/usr/src/linux/mm
	cp fs/xfs/libxfs/xfs_sb.h $pkgdir/usr/src/linux/fs/xfs/libxfs/xfs_sb.h

	case "$CHOST" in
		x86_64*)
			mkdir -p $pkgdir/usr/src/linux/tools/objtool
			cp tools/objtool/objtool $pkgdir/usr/src/linux/tools/objtool
			;;
	esac

	for i in $(find . -name "Kconfig*"); do
		mkdir -p $pkgdir/usr/src/linux/$(echo $i | sed 's|/Kconfig.*||')
		cp $i $pkgdir/usr/src/linux/$i
	done
}
