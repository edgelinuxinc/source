#!/bin/bash
#

export WOKVERSION="2.0"

set -e

wokver() {
	cat <<EOF
wok - small and simple build framework, made for Minitena

Wok version: wok $WOKVERSION

Copyright (c) 2018 Minitena

EOF
	exit 0
}

wokusage() {
	cat <<EOF
wok - small and simple build framework, made for Minitena
Usage:	BARCH=[supported architecture] ./wok [option]

Host options:

	toolchain				Build cross-toolchain
	bootstrap				Build minimal chroot system
	image					Build *.iso image
	tarball					Make *.tar.xz archive with minimal system
	update-wok				Update 'wok' for chroot system
	enter-chroot				Enter the chroot system
	enter-chroot-binfmt			Enter the chroot system if host and target architectures are different
	auto-build				Automatically build Minitena
	auto-build-binfmt			Automatically build Minitena if host and target architectures are different

Target options:

	core|core-system			Build repository of Minitena with main packages

Target package options: wok [option] [package]

	view-sums				View md5 sums for specific package
	package					Build specific package
	update-package				Update specific package

Misc:

	version					Show version of 'wok'
	usage					Display usage of 'wok'

EOF
	exit 0
}

initdb() {
	local dir="$@"
	for dbindir in $dir; do
		mkdir -p $dbindir/var/lib/pacman
	done
}

pkginstall() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd $REPO/$mergepkg
		makepkg --config $BUILD/target-makepkg.conf -d -c -C -f --skipinteg -f
		pacman -U $PACKAGES/$mergepkg-*.pkg.tar.xz --root $ROOTFS --arch $BARCH --noconfirm
	done
}

pkgchinstall() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd $CHREPO/$mergepkg
		makepkg --config $BUILD/target-makepkg.conf -d -c -C -f --skipinteg -f
		pacman -U $PACKAGES/chroot-$mergepkg*.pkg.tar.xz --root $ROOTFS --arch $BARCH --noconfirm
		rm -rf $PACKAGES/chroot-$mergepkg-*.pkg.tar.xz
	done
}

pkgchtwoinstall() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd $CHREPO/$mergepkg
		makepkg --config $BUILD/host-makepkg.conf -d -c -C -f --skipinteg -f
		pacman -U $PACKAGES/chroot-$mergepkg*.pkg.tar.xz --root $ROOTFS --arch $BARCH --noconfirm
		rm -rf $PACKAGES/chroot-$mergepkg-*.pkg.tar.xz
	done
}

pkgtcinstall() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd $TCREPO/$mergepkg
		makepkg --config $BUILD/host-makepkg.conf -d -c -C -f --skipinteg -f
		pacman -U $PACKAGES/host-$mergepkg*.pkg.tar.xz --root $TOOLS --force --noconfirm
		rm -rf $PACKAGES/host-$mergepkg-*.pkg.tar.xz
	done
}

pkgnativeinstall() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --noconfirm --needed --arch $BARCH
	done
}

pkgnativebuild() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
	done
}

pkgnativeinstallforce() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --force --noconfirm --needed --arch $BARCH
	done
}

pkgnativeinstallforcenodeps() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --force -dd --noconfirm --needed --arch $BARCH
	done
}

pkgnativeinstallnodeps() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz -dd --noconfirm --needed --arch $BARCH
	done
}

pkgnativeinstallonly() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --noconfirm --needed --arch $BARCH
	done
}

pkgnativeinstallonlyforce() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --force --noconfirm --needed --arch $BARCH
	done
}

pkgnativeinstallonlyforcenodeps() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --force -dd --noconfirm --needed --arch $BARCH
	done
}

pkgnativeinstallonlynodeps() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz -dd --noconfirm --needed --arch $BARCH
	done
}

pkgnativereinstall() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C -f
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --noconfirm --arch $BARCH
	done
}

pkgnativerebuild() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C -f
	done
}

pkgnativereinstallforce() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --force --noconfirm --arch $BARCH
	done
}

pkgnativereinstallforcenodeps() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz --force -dd --noconfirm --arch $BARCH
	done
}

pkgnativereinstallnodeps() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg --config /etc/makepkg.conf -d -c -C || true
		pacman -U /output/packages/$mergepkg-*.pkg.tar.xz -dd --noconfirm --arch $BARCH
	done
}

pkgnativeremove() {
	local pkg="$@"
	for mergepkg in $pkg; do
		pacman -R $mergepkg --noconfirm
	done
}

viewsums() {
	local pkg="$@"
	for mergepkg in $pkg; do
		cd /var/repo/$mergepkg
		makepkg -g
	done
}

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		echo "'wok' must be run as root"
		exit 1
	fi
}

setup_architecture() {
	case $BARCH in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-generic-linux"
			export XKARCH="x86_64"
			export GCCOPTS="--with-arch=x86-64 --with-tune=generic --with-linker-hash-style=gnu --enable-cet=auto"
			export BINUTILSOPTS="--enable-targets=x86_64-pep"
			export GLIBCOPTS="--enable-static-pie --enable-cet"
			export QEMUARCH="x86_64"
			;;
		i586)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i586-generic-linux"
			export XKARCH="i386"
			export GCCOPTS="--with-arch=i586 --with-tune=generic --with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS="--enable-static-pie"
			export QEMUARCH="i386"
			;;
		aarch64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-generic-linux"
			export XKARCH="arm64"
			export GCCOPTS="--with-arch=armv8-a --with-abi=lp64 --with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="aarch64"
			;;
		arm)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="armv7l-generic-linux-gnueabihf"
			export XKARCH="arm"
			export GCCOPTS="--with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="arm"
			;;
		mips64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips64-generic-linux"
			export XKARCH="mips"
			export GCCOPTS="--with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64 --with-linker-hash-style=sysv"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="mips64"
			;;
		mips)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips-generic-linux"
			export XKARCH="mips"
			export GCCOPTS="--with-arch=mips32 --with-mips-plt --with-float=soft --with-abi=32 --with-linker-hash-style=sysv"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="mips"
			;;
		powerpc64le)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64le-generic-linux"
			export XKARCH="powerpc"
			export GCCOPTS="--with-long-double-128 --with-linker-hash-style=gnu --enable-secureplt --enable-decimal-float=no --enable-targets=powerpcle-linux"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="ppc64le"
			;;
		powerpc64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64-generic-linux"
			export XKARCH="powerpc"
			export GCCOPTS="--with-long-double-128 --with-linker-hash-style=gnu --enable-secureplt --enable-decimal-float=no"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="ppc64"
			;;
		powerpc)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc-generic-linux"
			export XKARCH="powerpc"
			export GCCOPTS="--with-long-double-128 --with-linker-hash-style=gnu --enable-secureplt --enable-decimal-float=no"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="ppc"
			;;
		sparc64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="sparc64-generic-linux"
			export XKARCH="sparc"
			export GCCOPTS="--with-cpu=ultrasparc --with-long-double-128 --with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="sparc64"
			;;
		sparc)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="sparc-generic-linux"
			export XKARCH="sparc"
			export GCCOPTS="--with-long-double-128 --with-linker-hash-style=gnu --disable-linux-futex"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="sparc"
			;;
		s390x)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="s390x-generic-linux"
			export XKARCH="s390"
			export GCCOPTS="--with-arch=z196 --with-tune=zEC12 --with-zarch --with-long-double-128 --with-linker-hash-style=gnu --enable-decimal-float"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="s390x"
			;;
		microblaze)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="microblaze-generic-linux"
			export XKARCH="microblaze"
			export GCCOPTS="--with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="microblaze"
			;;
		riscv64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-generic-linux"
			export XKARCH="riscv"
			export GCCOPTS="--with-arch=rv64imafdc --with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="riscv64"
			;;
		riscv32)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv32-generic-linux"
			export XKARCH="riscv"
			export GCCOPTS="--with-arch=rv32imafdc --with-linker-hash-style=gnu"
			export BINUTILSOPTS=''
			export GLIBCOPTS=''
			export QEMUARCH="riscv32"
			;;
		*)
			echo "Architecture is not set or is not supported by 'wok'"
			exit 1
	esac
}

setup_environment() {
	export CWD="$(pwd)"
	export BUILD="$CWD/build_$BARCH"
	export SOURCES="$BUILD/sources"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/tools"
	export ISODIR="$BUILD/isodir"
	export ISOBUILD="$BUILD/isobuild"
	export LIVEOS="$BUILD/liveos"
	export TARBALLDIR="$BUILD/tarballdir"
	export EFIBUILD="$BUILD/efibuild"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"
	export CHREPO="$CWD/chroot"

	export LC_ALL="POSIX"
	export PATH="$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="$(expr $(nproc) + 1)"
	fi

	export MKOPTS="-j$MKJOBS"

	export CFLAGS="-O3 -pipe"
	export CXXFLAGS="$CFLAGS"
}

build_environment() {
	rm -rf $BUILD
	mkdir -p $BUILD $SOURCES $PACKAGES $ROOTFS $TOOLS $LIVEOS $EFIBUILD $ISOBUILD $ISODIR

	initdb $TOOLS $ROOTFS

	cp -a $TCREPO/makepkg.conf $BUILD/host-makepkg.conf
	cp -a $CHREPO/makepkg.conf $BUILD/target-makepkg.conf

	for files in $BUILD/host-makepkg.conf $BUILD/target-makepkg.conf; do
		sed -i $files \
			-e "s|@CARCH[@]|$BARCH|g" \
			-e "s|@CHOST[@]|$XTARGET|g" \
			-e "s|@CFLAGS[@]|$CFLAGS|g" \
			-e "s|@CXXFLAGS[@]|$CXXFLAGS|g" \
			-e "s|@MKOPTS[@]|$MKOPTS|g" \
			-e "s|@PKGS[@]|$PACKAGES|g" \
			-e "s|@SOURCES[@]|$SOURCES|g" \
			-e "s|@ROOTFS[@]|$ROOTFS|g" \
			-e "s|@TOOLS[@]|$TOOLS|g" \
			-e "s|@XHOST[@]|$XHOST|g" \
			-e "s|@XTARGET[@]|$XTARGET|g" \
			-e "s|@XKARCH[@]|$XKARCH|g" \
			-e "s|@GCCOPTS[@]|$GCCOPTS|g" \
			-e "s|@BINUTILSOPTS[@]|$BINUTILSOPTS|g" \
			-e "s|@GLIBCOPTS[@]|$GLIBCOPTS|g" \
			-e "s|@HOSTCC[@]|$HOSTCC|g" \
			-e "s|@HOSTCXX[@]|$HOSTCXX|g" \
			-e "s|@PATH[@]|$PATH|g" \
			-e "s|@LC_ALL[@]|$LC_ALL|g"
	done
}

build_toolchain() {
	pkginstall filesystem
	pkgtcinstall file
	pkgtcinstall pkgconf
	pkgchtwoinstall linux-headers
	pkgtcinstall binutils
	pkgtcinstall gcc-static
	pkgchtwoinstall glibc
	pkgtcinstall gcc
}

build_bootstrap() {
	pkgchinstall zlib
	pkgchinstall m4
	pkgchinstall bison
	pkgchinstall binutils
	pkgchinstall gcc
	pkgchinstall ncurses
	pkgchinstall bash
	pkgchinstall make
	pkgchinstall file
	pkgchinstall gawk
	pkgchinstall perl
	pkgchinstall xz-utils
	pkgchinstall patch
	pkgchinstall busybox
	pkgchinstall libressl
	pkgchinstall curl
	pkgchinstall libarchive
	pkgchinstall attr
	pkgchinstall acl
	pkgchinstall libcap
	pkgchinstall fakeroot
	pkgchinstall pacman
}

build_symlinks() {
	for file in awk bash cat curl dd du echo env fakeroot file grep install ln ls m4 makepkg pacman perl pwd rm sed sh stty; do
		ln -sf /tools/bin/${file} $ROOTFS/bin
	done

	ln -sf /tools/lib/libgcc_s.so  $ROOTFS/usr/lib
	ln -sf /tools/lib/libgcc_s.so.1 $ROOTFS/usr/lib
	ln -sf /tools/lib/libstdc++.so $ROOTFS/usr/lib
	ln -sf /tools/lib/libstdc++.so.6 $ROOTFS/usr/lib
	ln -sf /tools/lib/libstdc++.a  $ROOTFS/usr/lib
	ln -sf /tools/lib/libssp.so $ROOTFS/usr/lib
	ln -sf /tools/lib/libssp.so.0 $ROOTFS/usr/lib
	ln -sf /tools/lib/libssp.so.0.0.0 $ROOTFS/usr/lib
	ln -sf /tools/lib/libssp.a $ROOTFS/usr/lib
	ln -sf /tools/lib/libssp_nonshared.a  $ROOTFS/usr/lib

	case $BARCH in
		x86_64|aarch64)
			ln -sf lib $ROOTFS/tools/lib64
			;;
	esac
}

update_wok() {
	cp $CWD/wok $ROOTFS/usr/bin

	rm -rf $ROOTFS/var/order
	cp $REPO/order $ROOTFS/var/order
}

enter_chroot() {
	set +e

	mkdir -p $ROOTFS/output/{stage,initrd,sources,packages}
	mkdir -p $ROOTFS/var/repo

	mount --bind /proc $ROOTFS/proc
	mount --bind /sys $ROOTFS/sys
	mount --bind /dev $ROOTFS/dev
	mount --bind /tmp $ROOTFS/tmp
	mount --bind $REPO $ROOTFS/var/repo
	mount --bind $PACKAGES $ROOTFS/output/packages
	mount --bind $SOURCES $ROOTFS/output/sources

	chroot $ROOTFS /usr/bin/env -i \
		TERM="$TERM" \
		LD_LIBRARY_PATH="/usr/lib:/tools/lib" \
		PATH="/usr/bin:/tools/bin" \
		PS1='(chroot) \u:\w\$ ' \
		BARCH="$BARCH" \
		/usr/bin/sh

	umount -l $ROOTFS/var/repo
	umount -l $ROOTFS/proc
	umount -l $ROOTFS/sys
	umount -l $ROOTFS/dev
	umount -l $ROOTFS/tmp
	umount -l $ROOTFS/output/sources
	umount -l $ROOTFS/output/packages

	set -e
}

enter_chroot_binfmt() {
	set +e

	if [ -f $(which qemu-$QEMUARCH-static) ]; then
		cp $(which qemu-$QEMUARCH-static) $ROOTFS/usr/bin
	else
		set -e
		echo "Couldn't setup binfmt!"
		exit 1
	fi

	mkdir -p $ROOTFS/output/{stage,initrd,sources,packages}
	mkdir -p $ROOTFS/var/repo

	mount --bind /proc $ROOTFS/proc
	mount --bind /sys $ROOTFS/sys
	mount --bind /dev $ROOTFS/dev
	mount --bind /tmp $ROOTFS/tmp
	mount --bind $REPO $ROOTFS/var/repo
	mount --bind $PACKAGES $ROOTFS/output/packages
	mount --bind $SOURCES $ROOTFS/output/sources

	chroot $ROOTFS /usr/bin/env -i \
		TERM="$TERM" \
		LD_LIBRARY_PATH="/usr/lib:/tools/lib" \
		PATH="/usr/bin:/tools/bin" \
		PS1='(chroot) \u:\w\$ ' \
		BARCH="$BARCH" \
		/usr/bin/sh

	umount -l $ROOTFS/var/repo
	umount -l $ROOTFS/proc
	umount -l $ROOTFS/sys
	umount -l $ROOTFS/dev
	umount -l $ROOTFS/tmp
	umount -l $ROOTFS/output/sources
	umount -l $ROOTFS/output/packages

	set -e
}

build_final_system() {
	set +e

	mkdir -p $ROOTFS/output/{stage,initrd,sources,packages}
	mkdir -p $ROOTFS/var/repo

	mount --bind /proc $ROOTFS/proc
	mount --bind /sys $ROOTFS/sys
	mount --bind /dev $ROOTFS/dev
	mount --bind /tmp $ROOTFS/tmp
	mount --bind $REPO $ROOTFS/var/repo
	mount --bind $PACKAGES $ROOTFS/output/packages
	mount --bind $SOURCES $ROOTFS/output/sources

	chroot $ROOTFS /usr/bin/env -i \
		TERM="$TERM" \
		LD_LIBRARY_PATH="/usr/lib:/tools/lib" \
		PATH="/usr/bin:/tools/bin" \
		BARCH="$BARCH" \
		/usr/bin/wok final-system

	umount -l $ROOTFS/var/repo
	umount -l $ROOTFS/proc
	umount -l $ROOTFS/sys
	umount -l $ROOTFS/dev
	umount -l $ROOTFS/tmp
	umount -l $ROOTFS/output/sources
	umount -l $ROOTFS/output/packages

	set -e
}

build_final_system_binfmt() {
	set +e

	if [ -f $(which qemu-$QEMUARCH-static) ]; then
		cp $(which qemu-$QEMUARCH-static) $ROOTFS/usr/bin
	else
		set -e
		echo "Couldn't setup binfmt!"
		exit 1
	fi

	mkdir -p $ROOTFS/output/{stage,initrd,sources,packages}
	mkdir -p $ROOTFS/var/repo

	mount --bind /proc $ROOTFS/proc
	mount --bind /sys $ROOTFS/sys
	mount --bind /dev $ROOTFS/dev
	mount --bind /tmp $ROOTFS/tmp
	mount --bind $REPO $ROOTFS/var/repo
	mount --bind $PACKAGES $ROOTFS/output/packages
	mount --bind $SOURCES $ROOTFS/output/sources

	chroot $ROOTFS /usr/bin/env -i \
		TERM="$TERM" \
		LD_LIBRARY_PATH="/usr/lib:/tools/lib" \
		PATH="/usr/bin:/tools/bin" \
		BARCH="$BARCH" \
		/usr/bin/wok final-system

	umount -l $ROOTFS/var/repo
	umount -l $ROOTFS/proc
	umount -l $ROOTFS/sys
	umount -l $ROOTFS/dev
	umount -l $ROOTFS/tmp
	umount -l $ROOTFS/output/sources
	umount -l $ROOTFS/output/packages

	set -e
}

adjust_toolchain() {
	echo "Please, wait..."
	sleep 1

	mv /tools/bin/ld /tools/bin/ld-old
	mv /tools/$(cc -dumpmachine)/bin/ld /tools/$(cc -dumpmachine)/bin/ld-old
	mv /tools/bin/ld-new /tools/bin/ld
	ln -sf /tools/bin/ld /tools/$(cc -dumpmachine)/bin/ld

	rm -rf /tools/bin/ld-old
	rm -rf /tools/$(cc -dumpmachine)/bin/ld-old

	gcc -dumpspecs | sed -e 's@/tools@@g' \
		-e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
		-e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' > \
		`dirname $(gcc --print-libgcc-file-name)`/specs

	echo "Toolchain adjust is done"
}

build_core_system() {
	for finalpkg in $(cat /var/core.order); do
		case $finalpkg in
			glibc)
				pkgnativeinstallnodeps glibc
				wok adjust-toolchain
				;;
			m4)
				pkgnativeinstallforce m4
				;;
			gmp)
				pkgnativeinstallnodeps gmp
				;;
			binutils)
				pkgnativebuild binutils
				pkgnativeremove chroot-binutils || true
				pkgnativeinstallonly binutils
				;;
			gcc)
				pkgnativebuild gcc
				pkgnativeremove chroot-gcc  || true 
				pkgnativeinstallonlyforce gcc
				;;
			sed)
				pkgnativeinstallforce sed
				;;
			cracklib)
				pkgnativebuild cracklib
				pkgnativeinstallonlyforcenodeps cracklib
				;;
			bash-completion)
				pkgnativebuild bash-completion
				pkgnativeinstallonlyforcenodeps bash-completion
				;;
			shadow)
				pkgnativebuild shadow
				rm -rf /output/packages/*debug*.pkg*
				pkgnativeinstallonlyforcenodeps shadow
				;;
			util-linux)
				rm -rf /output/packages/util-linux*.pkg*
				pkgnativerebuild util-linux
				rm -rf /output/packages/*debug*.pkg*
				pkgnativereinstallforcenodeps util-linux
				;;
			procps-ng)
				pkgnativebuild procps-ng
				pkgnativeinstallonlyforcenodeps procps-ng
				;;
			systemd)
				rm -rf /output/packages/systemd*.pkg*
				pkgnativerebuild systemd
				pkgnativereinstallforcenodeps systemd
				;;
			freetype)
				rm -rf /output/packages/freetype*.pkg*
				pkgnativerebuild freetype
				pkgnativereinstallforcenodeps freetype
				;;
			harfbuzz)
				rm -rf /output/packages/harfbuzz*.pkg*
				pkgnativerebuild harfbuzz
				pkgnativereinstallforcenodeps harfbuzz
				;;
			dbus)
				pkgnativebuild dbus
				pkgnativeinstallonlyforcenodeps dbus
				;;
			dracut)
				pkgnativebuild dracut
				pkgnativeinstallonlyforcenodeps dracut
				;;
			polkit)
				groupadd -fg 27 polkitd || true
				useradd -c "PolicyKit Daemon Owner" -d /etc/polkit-1 -u 27 -g polkitd -s /bin/false polkitd || true
				pkgnativeinstall polkit
				;;
			coreutils)
				pkgnativeinstallforce coreutils
				;;
			gawk)
				pkgnativeinstallforce gawk
				;;
			grep)
				pkgnativeinstallforce grep
				;;
			curl)
				pkgnativeinstallforce curl
				;;
			perl)
				pkgnativeinstallforce perl
				;;
			file)
				pkgnativeinstallforce file
				;;
			bash)
				pkgnativebuild bash
				;;
			pacman)
				pkgnativebuild pacman
				rm -rf /output/packages/*debug*.pkg*
				;;
			pacman-contrib)
				pkgnativebuild pacman-contrib
				rm -rf /output/packages/*debug*.pkg*
				;;
			fakeroot)
				pkgnativebuild fakeroot
				;;
			vim)
				pkgnativebuild vim
				;;
			openntpd)
				pkgnativebuild openntpd
				;;
			gnu-efi)
				case $BARCH in
					x86_64|i586|aarch64|arm)
						pkgnativeinstall gnu-efi
						;;
				esac
				;;
			dpdk)
				case $BARCH in
					x86_64|aarch64)
						pkgnativeinstall dpdk
						;;
				esac
				;;
			rust)
				case $BARCH in
					x86_64|i586|aarch64|arm|powerpc|powerpc64|powerpc64le|mips|mips64|sparc64|s390x)
						pkgnativeinstallnodeps rust
						;;
				esac
				;;
			go)
				case $BARCH in
					x86_64|i586|aarch64|arm|powerpc|powerpc64|powerpc64le|mips|mips64|s390x)
						pkgnativeinstall go
						;;
				esac
				;;
			llvm)
				case $BARCH in
					x86_64|i586|aarch64|arm|powerpc|powerpc64|powerpc64le|mips|mips64|sparc64|sparc|s390x)
						pkgnativeinstall llvm
						;;
				esac
				;;
			compiler-rt)
				case $BARCH in
					x86_64|i586|aarch64|arm|powerpc|powerpc64|powerpc64le|mips|mips64|sparc64|sparc|s390x)
						pkgnativeinstall compiler-rt
						;;
				esac
				;;
			clang)
				case $BARCH in
					x86_64|i586|aarch64|arm|powerpc|powerpc64|powerpc64le|mips|mips64|sparc64|sparc|s390x)
						pkgnativeinstall clang
						;;
				esac
				;;
			lld)
				case $BARCH in
					x86_64|i586|aarch64|arm|powerpc|powerpc64|powerpc64le|mips|mips64|sparc64|sparc|s390x)
						pkgnativeinstall lld
						;;
				esac
				;;
			*)
				pkgnativeinstall $finalpkg
		esac

	done

	case $BARCH in
		x86_64|i586)
			pkgnativeinstall efivar
			pkgnativeinstall efibootmgr
			pkgnativeinstall syslinux
			pkgnativeinstall grub
			;;
	esac

	pkgnativebuild meta

	rm -rf /output/packages/*debug*.pkg*

	cd /output/packages/
	repo-add core.db.tar.xz *.pkg*
}

download_loader() {
	cd $SOURCES
	curl -k -C - -L -O https://mirrors.edge.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.xz
	curl -k -C - -L -O https://github.com/ivandavidov/systemd-boot/releases/download/systemd-boot_26-May-2018/systemd-boot_26-May-2018.tar.xz
	tar -xf syslinux-6.03.tar.xz
	tar -xf systemd-boot_26-May-2018.tar.xz
}

install_base() {
	export LIVEPACKAGES='minitena-base dhcp wpa_supplicant open-iscsi openssh'
	mkdir -p $LIVEOS/var/lib/pacman
	mkdir -p $LIVEOS/var/cache/pacman/pkg
	pacman --config $ROOTFS/etc/pacman.conf -Syy $LIVEPACKAGES --cachedir $LIVEOS/var/cache/pacman/pkg --root $LIVEOS --arch $BARCH --noconfirm
}

configure_liveos() {
	rm -rf $LIVEOS/var/cache/pacman/*
	rm -rf $LIVEOS/usr/include
	rm -rf $LIVEOS/usr/lib/*.a
	rm -rf $LIVEOS/usr/lib/pkgconfig
	rm -rf $LIVEOS/usr/share/pkgconfig

	mkdir -p $LIVEOS/etc/systemd/system/getty@tty1.service.d/
cat > $LIVEOS/etc/systemd/system/getty@tty1.service.d/override.conf << "EOF"
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin root %I $TERM
EOF
}

build_initramfs() {
	. $REPO/linux/PKGBUILD

	mv $LIVEOS/boot/vmlinuz-linux $ISODIR/kernel
	rm -rf $LIVEOS/boot/initramfs-linux.img

	chroot $LIVEOS /usr/bin/dracut --omit systemd --no-hostonly --add-drivers "ahci" --force-add "dmsquash-live" --force --lz4 -q boot/initramfs-linux.img $zerover
	mv $LIVEOS/boot/initramfs-linux.img $ISODIR/initrd
}

build_liveos() {
	export ROOTFS_SIZE=$(du -sm "$LIVEOS"|awk '{print $1}')
	if [ -z "$ROOTFS_FREESIZE" ]; then
		export ROOTFS_FREESIZE="$((ROOTFS_SIZE/6))"
	fi

	mkdir -p $ISOBUILD/tmp/LiveOS
	truncate -s "$((ROOTFS_SIZE+ROOTFS_FREESIZE))M" \
		$ISOBUILD/tmp/LiveOS/rootfs.img >/dev/null 2>&1
	mkdir -p $ISOBUILD/tmp-rootfs
	mkfs.ext4 -F -m1 $ISOBUILD/tmp/LiveOS/rootfs.img >/dev/null 2>&1
	mount -o loop $ISOBUILD/tmp/LiveOS/rootfs.img $ISOBUILD/tmp-rootfs
	cp -a $LIVEOS/* $ISOBUILD/tmp-rootfs/
	umount -f $ISOBUILD/tmp-rootfs
	mkdir -p $ISODIR/LiveOS
	mksquashfs $ISOBUILD/tmp $ISODIR/LiveOS/squashfs.img -comp xz -b 128K -Xdict-size 100% || exit 1
	chmod 444 $ISODIR/LiveOS/squashfs.img
}

prepare_bios() {
	cp $SOURCES/syslinux-6.03/bios/core/isolinux.bin $ISODIR/isolinux.bin
	cp $SOURCES/syslinux-6.03/bios/com32/elflink/ldlinux/ldlinux.c32 $ISODIR/ldlinux.c32
	cp $SOURCES/syslinux-6.03/bios/com32/libutil/libutil.c32 $ISODIR/libutil.c32
	cp $SOURCES/syslinux-6.03/bios/com32/menu/menu.c32 $ISODIR/menu.c32

cat > $ISODIR/isolinux.cfg << "EOF"
UI menu.c32
PROMPT 0
 
MENU TITLE Boot Menu:
TIMEOUT 59
DEFAULT minitena
 
LABEL minitena
	MENU LABEL Minitena
	LINUX /kernel
	INITRD /initrd
	APPEND root=live:LABEL=Minitena loglevel=4 ro rd.live.image rhgb rd.luks=0 rd.md=0 rd.dm=0
EOF
}

prepare_efi() {
	case $BARCH in
		x86_64)
			export EFIVER="x86_64"
			export BOOTEFI="BOOTx64.EFI"
			;;
		i586)
			export EFIVER="x86"
			export BOOTEFI="BOOTIA32.EFI"
			;;
	esac

	kernel_size=`du -b $ISODIR/kernel | awk '{print \$1}'`
	rootfs_size=`du -b $ISODIR/initrd | awk '{print \$1}'`
	loader_size=`du -b $SOURCES/systemd-boot_26-May-2018/uefi_root/EFI/BOOT/$BOOTEFI | awk '{print \$1}'`

	image_size=$((kernel_size + rootfs_size + loader_size + 65536 + 6291456))
    
	rm -f $EFIBUILD/uefi.img
	truncate -s $image_size $EFIBUILD/uefi.img

	export LOOP_DEVICE_HDD=$(losetup -f)
	losetup $LOOP_DEVICE_HDD $EFIBUILD/uefi.img

	mkfs.vfat $LOOP_DEVICE_HDD

	rm -rf $EFIBUILD/uefi_image
	mkdir -p $EFIBUILD/uefi_image
	mount $EFIBUILD/uefi.img $EFIBUILD/uefi_image

	mkdir -p $EFIBUILD/uefi_image/EFI/BOOT
	cp $SOURCES/systemd-boot_26-May-2018/uefi_root/EFI/BOOT/$BOOTEFI $EFIBUILD/uefi_image/EFI/BOOT

	cp $ISODIR/kernel $EFIBUILD/uefi_image/kernel
	cp $ISODIR/initrd $EFIBUILD/uefi_image/initrd

	mkdir -p $EFIBUILD/uefi_image/loader/entries

cat > $EFIBUILD/uefi_image/loader/loader.conf << "EOF"
default minitena-live
timeout 60
editor 1
EOF

cat > $EFIBUILD/uefi_image/loader/entries/minitena-live.conf << "EOF"
title Minitena
version $EFIVER
linux kernel
initrd initrd
options root=live:LABEL=Minitena loglevel=4 ro rd.live.image rhgb rd.luks=0 rd.md=0 rd.dm=0
EOF

	sync
	umount -l -f $EFIBUILD/uefi_image
	sync
	sleep 1

	rm -rf $EFIBUILD/uefi_image

	chmod ugo+r $EFIBUILD/uefi.img

	cp $EFIBUILD/uefi.img $ISODIR/uefi.img
}

build_isoimage() {
	xorriso -as mkisofs \
		-isohybrid-mbr $SOURCES/syslinux-6.03/bios/mbr/isohdpfx.bin \
		-c boot.cat \
		-b isolinux.bin \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e uefi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'Minitena' -V 'Minitena' \
		-o $BUILD/minitena-$BARCH.iso \
		$ISODIR/

	isohybrid $BUILD/minitena-$BARCH.iso
}

build_riscv_image() {
	:
}

install_tarball_base() {
	mkdir -p $TARBALLDIR/var/lib/pacman
	pacman --config $ROOTFS/etc/pacman.conf -Syy meta-base --root $TARBALLDIR --arch $BARCH --noconfirm

	mkdir -p $TARBALLDIR/etc/systemd/system/getty@tty1.service.d/
cat > $TARBALLDIR/etc/systemd/system/getty@tty1.service.d/override.conf << "EOF"
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin root %I $TERM
EOF
}

make_archive() {
	cd $TARBALLDIR
	tar -cJf $BUILD/minitena-$BARCH.tar.xz .
}

case "$1" in
	toolchain)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		;;
	bootstrap)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		build_bootstrap
		build_symlinks
		update_wok
		;;
	image)
            	if [ "$BARCH" = "aarch64" ]; then
			echo "Sorry we don't produce *.iso images for aarch64"
			exit 1
		else
			check_for_root
			setup_architecture
			setup_environment
			rm -rf $LIVEOS $EFIBUILD $ISOBUILD $ISODIR
			mkdir -p $LIVEOS $EFIBUILD $ISOBUILD $ISODIR
			download_loader
			install_base
			configure_liveos
			build_initramfs
			build_liveos
			prepare_efi
			prepare_bios
			build_isoimage
		fi
		;;
	tarball)
		check_for_root
		setup_architecture
		setup_environment
		rm -rf $TARBALLDIR
		mkdir -p $TARBALLDIR
		install_tarball_base
		make_archive
		;;
	core-system|core)
		build_core_system
		;;
	enter-chroot)
		check_for_root
		setup_architecture
		setup_environment
		enter_chroot
		;;
	auto-build)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		build_bootstrap
		build_symlinks
		build_final_system
		;;
	enter-chroot-binfmt)
		check_for_root
		setup_architecture
		setup_environment
		enter_chroot_binfmt
		;;
	auto-build-binfmt)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		build_bootstrap
		build_symlinks
		build_final_system_binfmt
		;;
	host-package|host-pkg)
		check_for_root
		setup_architecture
		setup_environment
		pkgtcinstall "$2"
		;;
	chroot-package|chroot-pkg)
		check_for_root
		setup_architecture
		setup_environment
		pkgchinstall "$2"
		;;
	chroota-package|chroota-pkg)
		check_for_root
		setup_architecture
		setup_environment
		pkgchtwoinstall "$2"
		;;
	chrootb-package|chrootb-pkg)
		check_for_root
		setup_architecture
		setup_environment
		pkginstall "$2"
		;;
	package|pkg)
		pkgnativeinstall $2
		cd /output/packages/
		repo-add core.db.tar.xz $2-*.pkg*
		;;
	update-package|uppkg)
		rm -rf /output/packages/$2-*.pkg*
		pkgnativereinstallforcenodeps $2
		rm -rf /output/packages/*debug*.pkg*
		cd /output/packages/
		repo-add core.db.tar.xz $2-*.pkg*
		;;
	view-sums)
		viewsums $2
		;;
	adjust-toolchain)
		if test -x /tools/bin/ld-new; then
			adjust_toolchain
		fi
		;;
	update-wok)
		check_for_root
		setup_architecture
		setup_environment
		update_wok
		;;
	version)
		wokver
		;;
	*|usage)
		wokusage
esac

exit 0

